%{
#include <stdio.h>
int line_num = 1;
int token_num = 1;
%}

DIGIT       [0-9]
ID          [a-zA-Z_][a-zA-Z0-9_]*
KEYWORD     "auto"|"break"|"case"|"char"|"const"|"continue"|"default"|"do"|"double"|"else"|"enum"|"extern"|"float"|"for"|"goto"|"if"|"int"|"long"|"register"|"return"|"short"|"signed"|"sizeof"|"static"|"struct"|"switch"|"typedef"|"union"|"unsigned"|"void"|"volatile"|"while"
OPERATOR    "+"|"-"|"*"|"/"|"="|"=="|"!="|"<"|">"|"<="|">="|"&&"|"||"|"!"|"&"|"|"|"^"|"~"|"<<"|">>"|"++"|"--"
SEPARATOR   [(){}\[\];,.]
WHITESPACE  [ \t]
NEWLINE     \n

%%

{KEYWORD}   { printf("%d\t%d\tKEYWORD\t%s\n", token_num++, line_num, yytext); }
{ID}        { printf("%d\t%d\tIDENTIFIER\t%s\n", token_num++, line_num, yytext); }
{DIGIT}+    { printf("%d\t%d\tNUMBER\t%s\n", token_num++, line_num, yytext); }
{OPERATOR}  { printf("%d\t%d\tOPERATOR\t%s\n", token_num++, line_num, yytext); }
{SEPARATOR} { printf("%d\t%d\tSEPARATOR\t%s\n", token_num++, line_num, yytext); }
{WHITESPACE} { /* Ignore whitespace */ }
{NEWLINE}   { line_num++; }
.           { printf("%d\t%d\tUNKNOWN\t%s\n", token_num++, line_num, yytext); }

%%

int main(int argc, char **argv) {
    if (argc > 1) {
        FILE *file = fopen(argv[1], "r");
        if (!file) {
            perror("Error opening file");
            return 1;
        }
        yyin = file;
    }
    printf("Token#\tLine#\tToken\tLexeme\n");
    yylex();
    return 0;
}

int yywrap() {
    return 1;
}
